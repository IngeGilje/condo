

// Connect to server
//const socket = new WebSocket('ws://localhost:8080');

// Show input
function showInput(className, labelText, maxlength, placeholder) {

  let html = this.showLabel(className, labelText);
  html += `
      <input type="text" 
        class="input-${className} js-input-${className}"
        maxlength="${maxlength}"
        placeholder="${placeholder}"
      >
    `;
  document.querySelector(`.js-div-${className}`)
    .innerHTML = html;
}

// hide input
function hideInput(className) {

  let element = undefined;
  if (this.isClassDefined(`js-label-${className}`)) {

    element = document.querySelector(`.js-label-${className}`); // Select the element
    if (element.classList.contains(`js-label-${className}`)) {
      document.querySelector(`.js-label-${className}`).style.display =
        'none';
    }
  }
  if (this.isClassDefined(`js-input-${className}`)) {

    element = document.querySelector(`.js-input-${className}`); // Select the element
    if (element.classList.contains(`js-input-${className}`)) {
      document.querySelector(`.js-input-${className}`).style.display =
        'none';
    }
  }
}

function isNumeric(string) {
  return !isNaN(string) && string.trim() !== "";
}

// Show checkbox
function showCheckbox(className, labelText, ...texts) {

  let html = this.showLabel(className, labelText);
  html += `
        <form>
      `;
  texts.forEach((text) => {
    html += `
        <input type="checkbox" 
          class="input-${className} js-input-${className}"
          id="${text}"
        >
          ${text}
        <br>
      `;
  });

  html += `
      </form>
    `;
  document.querySelector(`.js-div-${className}`)
    .innerHTML = html;
}

// Show radio buttons
function showRadioButtons(className, labelText, ...texts) {

  let html = this.showLabel(className, labelText);
  html += `
    <form>`;

  texts.forEach((text) => {

    html += `
        <input type="radio"
          id="${text}"
          name="${className}"
          value="${text}"
        >
        <label>
          ${text}
        </label>
        <br>
      `;
  });

  html += `
      </form>
    `;
  document.querySelector(`.js-div-${className}`).innerHTML =
    html;
}

// Show label
function showLabel(className, labelText) {
  return `
      <label for="${className}" class="label-${className} js-label-${className}">
        ${labelText}
      </label>
    `;
}

// Show button
function showButton(className, buttonText) {

  document.querySelector(`.js-div-${className}`)
    .innerHTML = `
    <button class="button-${className} js-button-${className}"
    >
      ${buttonText}
    </button>
  `;
}

// Show readonly input
function showInputReadOnly(className, labelText, placeholder) {

  document.querySelector(`.js-div-${className}`).innerHTML = `
      <label for="${className}" class="label-${className} js-label-${className}">
        ${labelText}
      </label>

      <input type="text" 
        readonly
        class="input-${className} js-input-${className}"
        placeholder="${placeholder}"
      >
    `;
}

function menu() {

  document.querySelector('.js-div-menu')
    .innerHTML = `
        <a href="condo-condo.html" class="a-menu-vertical-condo">Leilighet</a>
        <a href="condo-account.html" class="a-menu-vertical-account">Konto</a>
        <a href="condo-due.html" class="a-menu-vertical-due">Forfall</a>
        <a href="condo-monthlypayment.html" class="a-menu-vertical-monthlypayment">MÃ¥nedsavgift</a>
        <a href="condo-income.html" class="a-menu-vertical-income">Inntekter</a>
        <a href="condo-payment.html" class="a-menu-vertical-payment">Betaling</a>
        <a href="condo-overview.html" class="a-menu-vertical-overview">Oversikt</a>
        <a href="condo-remoteheating.html" class="a-menu-vertical-remoteheating">Fjernvarme</a>
        <a href="condo-budget.html" class="a-menu-vertical-budget">Budsjett</a>
        <a href="condo-condominium.html" class="a-menu-vertical-condominium">Sameie</a>
      `;
}

// Convert string to amount string (99 99,99 - 9999.99)
function convertToNumber(amount) {

  let number = '';

  // Remove spaces
  let strippedAmount = amount.replace(/\s+/g, '');

  // Check if it matches a numeric pattern with a comma as a decimal separator
  const regex = /^\d+(,\d+)?$/;
  if (regex.test(strippedAmount)) {

    // Convert to a standard number format (replace comma with a dot)
    number = strippedAmount.replace(',', '.');
  } else {
    number = amount;
  }
  return number;
}

// Convert string to norwegian number string ( 9999.9 -> 9999,90)
function convertToNorwegianNumber(amount) {

  const convertedAmount = this.convertToNumber(amount);
  if (isNumeric(convertedAmount)) {

    // Valid amount
    const number = Number(convertedAmount);
    const convertedNumber = number.toFixed(2);
    const formatedAmount = String(convertedNumber);
    const formatedNumber = formatedAmount.replace('.', ',');

    return formatedNumber;
  } else {

    // Not valid amount
    return amount;
  }
}

// check the dd.mm.yyyy format
function isValidDate(dateString) {

  // Regular expression to check the dd.mm.yyyy format
  const regex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
  const match = dateString.match(regex);

  if (!match) return false; // Return false if format doesn't match

  // Extract day, month, and year
  const day = parseInt(match[1], 10);
  const month = parseInt(match[2], 10);
  const year = parseInt(match[3], 10);

  // Check if month is between 1 and 12
  if (month < 1 || month > 12) return false;

  // Create a date object
  const date = new Date(year, month - 1, day);

  // Validate that the date components match
  return (
    date.getFullYear() === year &&
    date.getMonth() === month - 1 &&
    date.getDate() === day
  );
}

// Format date dd.mm.yyyy to yyyymmdd
function formatDateToyyyymmdd(date) {

  const dateParts = date.split(".");
  return `${dateParts[3]}${dateParts[2]}${dateParts[1]}`;
}

// Format date from yyyymmdd -> dd.mm.yyyy
function formatToNorDate(date) {

  const formatedDate = date.slice(6, 8) + '.' + date.slice(4, 6) + '.' + date.slice(0, 4);
  return formatedDate;
}

function findLastCondoId() {

  let lastCondoId = 0;
  condoArray.forEach((condo) => {

    lastCondoId = condo.condoId;
  });
  return lastCondoId;
}

function findLastCondominiumId() {

  let lastCondominiumId = 0;
  condominiumArray.forEach((condominium) => {

    lastCondominiumId = condominium.CondominiumId;
  });
  return lastCondominiumId;
}

function findLastDueId() {

  let lastDueId = 0;
  dueArray.forEach((due) => {

    lastDueId = due.dueId;
  });
  return lastDueId;
}

// Get all budget from MySQL database
function findLastBudgetId() {

  let lastBudgetId = 0;

  budgetArray.forEach((budget) => {

    lastBudgetId = budget.budgetId;
  });
  return lastBudgetId;
}

// Get all dues from MySQL database
function getDues() {

  const SQLquery = `
      SELECT * FROM due
      ORDER BY dueDate;
    `;
  socket.send(SQLquery);
}

// Get all incomes from MySQL database
function getIncomes() {

  const SQLquery = `
      SELECT * FROM income
      ORDER BY incomeDate DESC;
    `;
  socket.send(SQLquery);
}

// Get all budgets from MySQL database
function getBudgets() {

  const SQLquery = `
      SELECT * FROM budget
      ORDER BY budgetId;
    `;
  socket.send(SQLquery);
}

// Get all condos from MySQL database
function getCondos() {

  const SQLquery = `
      SELECT * FROM condo
      ORDER BY condoName;
    `;
  socket.send(SQLquery);
}

// Get all condos from MySQL database
function getCondominium() {

  const SQLquery = `
      SELECT * FROM condominium
      ORDER BY street;
    `;
  socket.send(SQLquery);
}

// Get all accounts from MySQL database
function getAccounts() {

  const SQLquery = `
    SELECT * FROM account
    ORDER BY accountId;
  `;

  socket.send(SQLquery);
}

// Get all payments from MySQL database
function getPayments() {

  const SQLquery = `
    SELECT * FROM payment
    ORDER BY paymentDate;
  `;
  socket.send(SQLquery);
}

function findLastAccountId() {

  let lastAccountId = 0;
  accountArray.forEach((account) => {

    lastAccountId = account.accountId;
  });
  return lastAccountId;
}

// Find last object in income array
function findLastIncomeId() {

  let selectedIncomeId = 0;
  incomeArray.forEach((income) => {
    selectedIncomeId = Number(income.incomeId);
  });

  return selectedIncomeId;
}

// Find last object in payment array
function findLastPaymentId() {

  let selectedPaymentId = 0;
  paymentArray.forEach((payment) => {
    selectedPaymentId = Number(payment.paymentId);
  });

  return selectedPaymentId;
}

// Check for at least 3 char. in text
function checkText(text, className, labelText) {

  let isTextValid = false;

  // Check text
  if ((text.length < 3) || text === '') {

    // Invalid text
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
    }
    isTextValid = false;
  } else {

    // Valid text
    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="label-${className} js-label-${className}">
            * ${labelText}
          </div>`;
    }
    isTextValid = true;
  }
  return isTextValid;
}

// Check for valid amount
function checkAmount(amount, className, labelText) {

  let isValidAmount = true;

  // 99 999,99 -> 99999.99
  amount = this.convertToNumber(amount);
  if (!isNumeric(amount)) {

    // Invalid amount
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
    }
    isValidAmount = false;
  } else {

    // Valid amount
    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="js-label-${className} label-${className}">
            * ${labelText}
          </div>`;
    }

    if (this.isClassDefined(`js-input-${className}`)) {

      isValidAmount = true;
    } else {
      isValidAmount = false;
    }
  }
  return isValidAmount;
}

// Check for valid norwegian date dd.mm.yyyy
function checkNorDate(dateString, className, labelText) {

  let isDateValid = true;
  dateString = (dateString.length === 0) ? this.findCurrentDate() : String(dateString);

  // Check for 2 digit day
  const dotPositionDay = dateString.indexOf(".");
  const day = (dotPositionDay === 1) ? '0' + dateString.slice(0, 1) : dateString.slice(0, 2);

  // Check for 2 digit month
  const monthString = dateString.slice(dotPositionDay + 1);
  const dotPositionMonth = monthString.indexOf(".");
  const month = (dotPositionMonth === 1) ? '0' + monthString.slice(0, 1) : monthString.slice(0, 2);

  // Check for 4 digit year
  const yearString = monthString.slice(dotPositionMonth + 1);
  const year = (yearString.length === 2) ? '20' + yearString : yearString;

  dateString = day + '.' + month + '.' + year;

  // Check for valid date
  if (!this.isValidDate(dateString)) {

    // Invalid date
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
      isDateValid = false;
    }
  } else {

    // Valid date
    document.querySelector(`.js-input-${className}`).value =
      dateString;

    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="js-label-${className} label-${className}">
            * ${labelText}
          </div>`;
    }
  }
  return isDateValid;
}

// Check if HTML class is defined
function isClassDefined(className) {

  const element =
    document.querySelector(`.${className}`);      // Select the element
  if (element !== null) {
    return (element.classList.contains(`${className}`)) ? true : false;
  } else {
    return false;
  }
}

function findNameOfMonth(month) {

  let nameOfMonth = '';
  switch (Number(month)) {
    case 1:
      nameOfMonth = 'Januar';
      break;
    case 2:
      nameOfMonth = 'Februar';
      break;
    case 3:
      nameOfMonth = 'Mars';
      break;
    case 4:
      nameOfMonth = 'April';
      break;
    case 5:
      nameOfMonth = 'Mai';
      break;
    case 6:
      nameOfMonth = 'Juni';
      break;
    case 7:
      nameOfMonth = 'Juli';
      break;
    case 8:
      nameOfMonth = 'August';
      break;
    case 9:
      nameOfMonth = 'September';
      break;
    case 10:
      nameOfMonth = 'Oktober';
      break;
    case 11:
      nameOfMonth = 'November';
      break;
    case 12:
      nameOfMonth = 'Desember';
      break;
  }
  return nameOfMonth;
}

// Check for valid European date (dd.mm.yyyy)
function checkEuropeanDate(euroDate) {

  // Regular expression for dd.dd.yyyy format
  const datePattern = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(\d{4})$/;

  // Check if it matches the format
  const matchFormat = (datePattern.test(euroDate)) ? true : false;
  return matchFormat;
}

function checkPhoneNumber(phoneNumber, className, labelText) {

  // Check valid postal code
  const phoneNumberPattern = /^\d{8}$/;
  if (!(phoneNumberPattern.test(phoneNumber))) {

    // Invalid phone number
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
    }
    return false;
  } else {

    // Valid valid phone number
    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="label-${className} js-label-${className}">
            * ${labelText}
          </div>`;
    }
    return true;
  }
}

function checkOrganizationNumber(organizationNumber, className, labelText) {

  // Check valid Organization Number
  const organizationNumberPattern = /^\d{9}$/;
  if (!(organizationNumberPattern.test(organizationNumber))) {

    // Invalid Organization Number
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
    }
    return false;
  } else {

    // Valid Organization Number
    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="label-${className} js-label-${className}">
            * ${labelText}
          </div>`;
    }
    return true;
  }
}

function checkAccountNumber(accountNumber, className, labelText) {

  // Check valid Account Number
  const accountNumberPattern = /^\d{11}$/;
  if (!(accountNumberPattern.test(accountNumber))) {

    // Invalid Organization Number
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
    }
    return false;
  } else {

    // Valid valid Organization Number
    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="label-${className} js-label-${className}">
            * ${labelText}
          </div>`;
    }
    return true;
  }
}

// Find current date (dd.mm.yyyy)
function findCurrentDate() {

  let today = String(new Date());
  let day = Number(today.slice(8, 10));
  today = new Date();
  const year = String(today.getFullYear());
  let month = today.getMonth() + 1; // Months are zero-indexed
  month = (month < 10)
    ? '0' + String(month)
    : String(month)

  day = (day < 10)
    ? day = '0' + String(day)
    : String(day)

  return `${day}.${month}.${year}`;  // Output in dd.mm.yyyy format
}

// Format number (12123.12) to norwegian amount (12 123,12)
function formatNumberToNorAmount(amount) {

  if (amount !== 0) {
    const formatter = new Intl.NumberFormat("nb-NO", {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    });

    // replace , with . (norwegian format)
    let formatedAmount = "";
    formatedAmount = formatter.format(amount);
    amount = formatedAmount.replace('.', ',');
    return amount;

  } else {
    return "";
  }
}

// Format norwegian number (12 345,12) to number (123456.12)
function formatNorNumberToNumber(number) {

  const formatedNumber = number.replace(',', '.');
  number = formatedNumber.replace(/\s+/g, "");
  return number;
}

// Format norwegian date (11.05.1983) to number (19830511)
function formatNorDateToNumber(norDate) {

  const number = norDate.substring(6,) +
    norDate.substring(3, 5) + norDate.substring(0, 2);

  return number;
}

// Show all payments
function showAllPayments(className) {

  let html = `

      <form action="/submit" method="POST">
        <label class="label-${className} js-label-${className}"
          for="selectedPaymentId">
            Betaling
        </label>
        <select class="select-${className} js-select-${className}"
          id="selectedPaymentId" name="selectedPaymentId"
        >
    `;

  paymentArray.forEach((payment) => {
    if (payment.paymentId !== '' && payment.paymentId !== 1) {
      if (payment.paymentId === selectedPaymentId) {

        html += `
          <option 
            value="${payment.paymentId}"
            selected
            >
            ${payment.paymentId} - ${payment.paymentText}
          </option>
        `;
      } else {
        html += `
          <option 
            value="${payment.paymentId}">
            ${payment.paymentId} - ${payment.paymentText}
          </option>
        `;
      }
    }
  });

  html += `
        </select >
      </form>
    `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

// Show all accounts
function showAllAccounts(className, accountType) {

  let html = `
      <form action="/submit" method="POST">
        <label class="label-${className} js-label-${className}"
          for="selectAccount">
            Konto
        </label>
        <select class="select-${className} js-select-${className}" 
          id="selectAccount" name="selectAccount"
        >
    `;

  accountArray.forEach((account) => {
    if (account.accountId > 1
      && (account.accountType === accountType || accountType === '' || accountType === ' ')) {
      if (account.accountId === selectedAccountId) {

        html += `
              <option 
                value="${account.accountId}"
                selected
                >
                ${account.accountId} - ${account.accountName}
              </option>
            `;
      } else {

        html += `
              <option 
                value="${account.accountId}">
                ${account.accountId} - ${account.accountName}
              </option>
            `;
      }
    }
  });

  html += `
      </select >
    </form>
  `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

// Show all dues
function showAllDues(className, dueId) {

  let html = `
        <form action="/submit" method="POST">
          <label class="label-${className}" for="selectedDueId">
            Forfall
          </label>
          <select class="select-${className} js-select-${className}" 
            id="selectedDueId" name="selectedDueId"
          >
      `;

  dueArray.forEach((due) => {

    if (due.dueId > 1) {
      if (due.dueId === dueId) {
        html += `
            <option 
              value="${due.dueId}"
              selected
              >
              ${due.dueId} - ${due.dueText}
            </option>
          `;
      } else {

        html += `
            <option 
              value="${due.dueId}">
              ${due.dueId} - ${due.dueText}
            </option>
          `;
      }
    }
  });

  html += `
      </select >
    </form>
  `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

// Show years
function showAllYears(className) {

  let html = `
    <form action="/submit" method="POST">
      <label class="label-${className} js-label-${className}"
        for="selectedYear">
          Ãr
      </label>
      <select class="select-${className} js-select-${className}" 
        id="selectedYear" name="selectedYear"
      >
    `;

  for (let year = 2025; year < 2040; year++) {
    if (year === selectedYear) {

      html += `
        <option 
          value="${year}"
          selected
          >
          ${year}
        </option>
      `;
    } else {
      html += `
        <option 
          value="${year}"
          >
          ${year}
        </option>
      `;
    }
  };

  html += `
      </select >
    </form>
  `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

// Show all condos
function showAllCondos(className, condoId) {

  let html = `
    <form action="/submit" method="POST">
      <label class="label-${className} js-label-${className}"
        for="selectedCondoId">
          Leilighet
      </label>
      <select class="select-${className} js-select-${className}" 
        id="selectedCondoId" name="selectedCondoId"
      >
    `;

  condoArray.forEach((condo) => {
    if (condo.condoId > 1) {
      if (condo.condoId === condoId) {

        html += `
          <option 
            value="${condo.condoId}"
            selected
            >
            ${condo.condoId} - ${condo.condoName}
          </option>
        `;
      } else {
        html += `
          <option 
            value="${condo.condoId}">
            ${condo.condoId} - ${condo.condoName}
          </option>
        `;
      }
    }
  });

  html += `
      </select >
    </form>
  `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

// Show all condominiums
function showAllCondominiums(className, condominiumId) {

  let html = `
    <form action="/submit" method="POST">
      <label class="label-${className} js-label-${className}"
        for="selectedCondominiumId">
          Sameie
      </label>
      <select class="select-${className} js-select-${className}" 
        id="selectedCondominiumId" name="selectedCondominiumId"
      >
    `;

  condominiumArray.forEach((condominium) => {
    if (condominium.condominiumId > 1) {
      if (condominium.condominiumId === condominiumId) {

        html += `
          <option 
            value="${condominium.condominiumId}"
            selected
            >
            ${condominium.condominiumId} - ${condominium.condominiumName}
          </option>
        `;
      } else {
        html += `
          <option 
            value="${condominium.condominiumId}">
            ${condominium.condominiumId} - ${condominium.condominiumName}
          </option>
        `;
      }
    }
  });

  html += `
      </select >
    </form>
  `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

// Show all incomes
function showAllIncomes(className) {

  let html = `
    <form action="/submit" method="POST">
      <label class="label-${className} js-label-${className}"
        for="selectedIncomeId">
          Inntekt
      </label>
      <select class="select-${className} js-select-${className}" 
        id="selectedIncomeId" name="selectedIncomeId"
      >
    `;

  incomeArray.forEach((income) => {
    if (income.incomeId > 1) {
      if (income.incomeId === selectedIncomeId) {

        html += `
          <option 
            value="${income.incomeId}"
            selected
            >
            ${income.incomeId} - ${income.incomeText}
          </option>
        `;
      } else {
        html += `
            <option 
              value="${income.incomeId}">
              ${income.incomeId} - ${income.incomeText}
            </option>
          `;
      }
    }
  });

  html += `
      </select >
    </form>
  `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

// Show days
function showAllDays(className, selectedDay) {

  selectedDay = (selectedDay === 0) ? 15 : selectedDay;
  let html = `
    <form action="/submit" method="POST">
      <label class="label-${className} js-label-${className}"
        for="selectedDay">
          Dag
      </label>
      <select class="select-${className} js-select-${className}" 
        id="selectedDay" name="selectedDay"
      >
    `;

  for (let day = 1; day < 29; day++) {
    if (day === selectedDay) {

      html += `
          <option 
            value="${day}"
            selected
            >
            ${day}
          </option>
        `;
    } else {
      html += `
        <option 
          value="${day}"
          >
          ${day}
        </option>
      `;
    }
  };

  html += `
      </select >
    </form>
  `;

  document.querySelector(`.js-div-${className}`).innerHTML = html;
}

function checkPostalCode(postalCode, className, labelText) {

  let isValidPostalCode = false;

  // Check valid postal code
  const norwegianPostalCodePattern = /^[0-9]{4}$/;
  if (!(norwegianPostalCodePattern.test(postalCode))) {

    // Invalid postal code
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
    }
    isValidPostalCode = false;
  } else {

    // Valid valid postal code
    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="label-${className} js-label-${className}">
            * ${labelText}
          </div>`;
    }
    isValidPostalCode = true;
  }
  return isValidPostalCode;
}

function checkEmail(eMail, className, labelText) {

  let isValideMail = false;

  // Check valid eMail
  const eMailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!(eMailRegex.test(eMail))) {

    // Invalid eMail
    if (this.isClassDefined(`js-label-${className}`)) {

      document.querySelector(`.js-label-${className}`).outerHTML =
        `<div class="label-${className}-red js-label-${className}-red">
            * Ugyldig ${labelText}
          </div>`;
    }
    isValideMail = false;
  } else {

    // Valid valid eMail
    if (this.isClassDefined(`js-label-${className}-red`)) {

      document.querySelector(`.js-label-${className}-red`).outerHTML =
        `<div class="label-${className} js-label-${className}">
            * ${labelText}
          </div>`;
    }
    isValideMail = true;
  }
  return isValideMail;
}

// Show selected menu
function markSelectedMenu(className, text) {

  document.querySelector(`.a-menu-${className}`).outerHTML =
    `<div class='a-menu-${className}-green'>${text}</div>`;
}

// Find id for selected condominium id
function findIdcondominium() {

  condominiumArray.forEach((condominium) => {

    // Check for matching condominium id
    if (condominium.condominiumId === selectedCondominiumId) {
      condominium = condominium.id;
    }
  });

  return condominium;
}

// Generate password
function generatePassword(passwordLenght,
  includeLowercase,
  includeUppercase,
  includeNumbers,
  includeSymbols) {

  const lowecaseChars = "abcdefghijlmnopqrstuvwxyzÃ¦Ã¸Ã¥";
  const uppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZÃÃÃ";
  const numberChars = "0123456789";
  const symbolChars = "@Â£$!#Â¤%&/()=?\^.:;,<>{[]}+";

  let allowedChars = "";
  let password = "";

  allowedChars += (includeLowercase) ? lowecaseChars : "";
  allowedChars += (includeUppercase) ? uppercaseChars : "";
  allowedChars += (includeNumbers) ? numberChars : "";
  allowedChars += (includeSymbols) ? symbolChars : "";


  if (Number(passwordLenght) < 1) {

    return "Oppgi lengden pÃ¥ passordet.";
  }

  if (Number(allowedChars.length) < 1) {

    return "Oppgi minimum et sett av karakterer";
  }

  for (let i = 0; i < Number(passwordLenght); i++) {

    const randomIndex = Math.floor(Math.random() * Number(allowedChars.length));
    password += allowedChars[randomIndex];
  }
  return password;
}

